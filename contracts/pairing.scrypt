import "ec.scrypt";

library Pairing {
    // log of r
    static const int N = 63;
    static const int r = 29793968203157093288;
    // (p^k - 1) / r
    static const int EXP = 11;
    static const bytes mask = reverseBytes(num2bin(1, N), N);

    static function millerLoop(Point P, Point Q): int {
        Point T = P;
        int f = 1;

        // main miller loop
        loop (N) : i {
            f = f * f * linefunc(T, T, Q);
            T = EC.doublePoint(T);

            int j = N - 1 - i;
            if (r & (mask << j)) {
                f = f * linefunc(T, P, Q);
                T = EC.addPoints(T, P);
            }
        }
        return f;
    }

    // compute the pairing e(P, Q)
    static function pairing(Point P, Point Q): int {
        int f = millerLoop(P, Q);
        // final exponentiation
        return pow(f, EXP);
    }

    // Create a function representing the line between P1 and P2, and evaluate it at T
    static function linefunc(Point P1, Point P2, Point T): int {
        return 1;
    }
}