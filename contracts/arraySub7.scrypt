struct ST1 {
    int x;
    bool y;
    bytes z;
    int[2] xx;
}

struct ST2 {
    bool a;
    ST1[2] b;
    bytes c;
}

struct ST3 {
    bool a;
    bytes c;
    ST2[2] b;
}

struct ST4 {
    int[2] a;
    ST3[2][2][2] b;
    bytes c;
}

struct ST5 {
    ST1 a;
    ST2[2][2][2] b;
    ST3 c;
    ST4 d;
    int[2][2] e;
    bytes f;
}

library L {

    static const int N = 2;
    static function getST5(int x /*x = 0*/) : ST5 {

        ST1 st1 = {0,false,b'', [0,0]};
        ST2 st2 = {false, [st1, st1], b''};
        ST3 st3 = {false, b'', [st2, st2]};
        ST4 st4 = {[0,0], [[[st3, st3], [st3, st3]], [[st3, st3], [st3, st3]]], b''};
        ST5 st5 = {st1, [[[st2,st2], [st2,st2]], [[st2,st2], [st2,st2]]], st3, st4, [[0, 0], [0, 0]], b''};


        st5.a = L.updateSt1(st5.a, x);

        loop (N) : i {
            loop (N) : j {
                loop (N) : k {
                    st5.b[i*(x+1)][j*(x+1)][k*(x+1)] = L.updateSt2(st5.b[i*(x+1)][j*(x+1)][k*(x+1)], x);
                }
            }
        }

        
        st5.c = L.updateSt3(st5.c, x);

        st5.d = L.updateSt4(st5.d, x);

        st5.e[0][x] = 1;
        st5.e[0][x+1] = 1;
        st5.e[L.f2(x+1)][x] = 1;
        st5.e[x+1][st5.e[0][x]] = 1;
        st5.f = b'01';
        return st5;
    }


    static function updateSt1(ST1 st1, int x /*x = 0*/) : ST1 {

        st1.x = 1;
        st1.y = true;
        st1.z = b'01';
        st1.xx[x] = 1;
        st1.xx[x + 1] = st1.xx[x];
        return st1;
    }

    static function updateSt2(ST2 st2, int x /*x = 0*/) : ST2 {

        st2.a = true;
        st2.b[x].x = 1;
        st2.b[x].y = true;
        st2.b[x].z = b'01';
        st2.b[x].xx[x] = 1;
        st2.b[x].xx[x + 1] = st2.b[x].xx[x];

        st2.b[L.f2(x +1)] = L.updateSt1(st2.b[L.f2(x +1)], x);

        st2.c = b'01';

        return st2;
    }

    static function updateSt3(ST3 st3, int x /*x = 0*/) : ST3 {

        st3.a = true;
        st3.c = b'01';
        st3.b[x] = L.updateSt2(st3.b[x], x);
        st3.b[x+1] = L.updateSt2(st3.b[x+1], x);
        
        return st3;
    }

    static function updateSt4(ST4 st4, int x /*x = 0*/) : ST4 {

        st4.a[x] = 1;
        st4.a[x+1] = 1;
        st4.c = b'01';

        loop (2) : i {
            loop (2) : j {
                loop (2) : k {
                    st4.b[i*(x+1)][j*(x+1)][k*(x+1)] = L.updateSt3(st4.b[i][j][k], x);
                }
            }    
        }

        return st4;
    }

    function f1(int x) : int {
        return x + 1;
    }

    static function f2(int x) : int {
        return x * 2 - 1;
    }
}

contract C {
    static const int N = 1;

    // change st array
    public function unlock(int x) {
        ST5 st5 = L.getST5(x);

        ST1 st1 = {1,true,b'01', [1,1]};
        ST2 st2 = {true, [st1, st1], b'01'};
        ST3 st3 = {true, b'01', [st2, st2]};
        ST4 st4 = {[1,1], [[[st3, st3], [st3, st3]], [[st3, st3], [st3, st3]]], b'01'};
        ST5 st5_ = {st1, [[[st2,st2], [st2,st2]], [[st2,st2], [st2,st2]]], st3, st4, [[1, 1], [1, 1]], b'01'};
        require(st5 == st5_);
        require(true);
    }
}
